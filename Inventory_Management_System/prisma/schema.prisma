generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change to your database provider if different
  url      = env("DATABASE_URL")
}

// Enum for AssetToTransaction status
enum AssetTransactionStatus {
  approvalPending
  returnPending
  returned
  rejected
}

// Enum for Transaction status
enum TransactionStatus {
  approvalPending
  returnPending
  returned
  rejected
}

model LocationType {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  isActive  Boolean

  //locations Location[] @relation("LocationTypeToLocations")
}

model Location {
  id           Int       @id @default(autoincrement())
  locationTypeId Int
  parentId     Int?
  name         String
  description  String?
  isActive     Boolean
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

 // locationType Location  @relation("LocationTypeToLocations", fields: [locationTypeId], references: [id])
  parent       Location? @relation("LocationHierarchy", fields: [parentId], references: [id])
  children     Location[] @relation("LocationHierarchy")

  assets       Asset[]   @relation("LocationToAssets")
}

model Asset {
  rfid       String   @id
  partNumber Int
  locationId Int
  createdAt  DateTime @default(now())
  isActive   Boolean
  updatedAt  DateTime @updatedAt
  reservedBy String?

  location      Location   @relation("LocationToAssets", fields: [locationId], references: [id])
  partNumberData PartNumber @relation("PartNumberToAssets", fields: [partNumber], references: [id])
  transactions  AssetToTransaction[] @relation("AssetsToAssetToTransaction")
}

model PartNumber {
  id              Int         @id @default(autoincrement())
  assetTypeId     Int
  quantityInUse   Int
  totalQuantity   Int
  quantityAvailable Int
  isActive        Boolean

  assetTypeData AssetType @relation("AssetTypeToPartNumbers", fields: [assetTypeId], references: [id])
  assets        Asset[]   @relation("PartNumberToAssets")
}

model AssetType {
  id       Int        @id @default(autoincrement())
  name     String
  isActive Boolean

  partNumbers PartNumber[] @relation("AssetTypeToPartNumbers")
}

model AssetField {
  id        Int       @id @default(autoincrement())
  name      String
  isActive  Boolean
  createdAt DateTime  @default(now())

  fieldToPartNumbers FieldToPartNumber[] @relation("AssetFieldToFieldToPartNumber")
  rfidToFields       RFIDToField[]       @relation("AssetFieldToRFIDToField")
}

model FieldToPartNumber {
  id         Int         @id @default(autoincrement())
  fieldId    Int
  partNumber Int

  assetField     AssetField @relation("AssetFieldToFieldToPartNumber", fields: [fieldId], references: [id])
 // partNumberData PartNumber @relation(fields: [partNumber], references: [id])
}

model RFIDToField {
  id        Int       @id @default(autoincrement())
  fieldId   Int
  value     String
  rfid      String

  assetField AssetField @relation("AssetFieldToRFIDToField", fields: [fieldId], references: [id])
}

model Transaction {
  id          Int               @id @default(autoincrement())
  requestedBy String
  createdAt   DateTime          @default(now())
  status      TransactionStatus
  respondedBy String?
  respondedAt DateTime?
  isActive    Boolean

  assetToTransactions AssetToTransaction[] @relation("TransactionToAssetToTransaction")
}

model AssetToTransaction {
  id            Int                  @id @default(autoincrement())
  rfid          String
  transactionId Int
  status        AssetTransactionStatus

  asset       Asset       @relation("AssetsToAssetToTransaction", fields: [rfid], references: [rfid])
  transaction Transaction  @relation("TransactionToAssetToTransaction", fields: [transactionId], references: [id])
}


